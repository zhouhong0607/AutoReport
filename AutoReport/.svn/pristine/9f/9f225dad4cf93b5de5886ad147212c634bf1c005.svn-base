package alertpacket;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.List;

import com.example.testservice.Info;

import android.R.integer;

public class Alert
{
	private final static List<AlertQueue> Alert_CID = new ArrayList<AlertQueue>();
	private final static List<AlertQueue> Alert_LAC = new ArrayList<AlertQueue>();
	private final static List<AlertQueue> Alert_CID_RSRP = new ArrayList<AlertQueue>();
	private final static List<AlertQueue> Alert_CID_RSRQ = new ArrayList<AlertQueue>();
	private final static List<AlertQueue> Alert_CID_RSSI = new ArrayList<AlertQueue>();
	private final static List<AlertQueue> Alert_LAC_RSRP = new ArrayList<AlertQueue>();
	private final static List<AlertQueue> Alert_LAC_RSRQ = new ArrayList<AlertQueue>();
	private final static List<AlertQueue> Alert_LAC_RSSI = new ArrayList<AlertQueue>();

	private final static int CID = 1;
	private final static int LAC = 2;
	private final static int CID_RSRP = 3;
	private final static int CID_RSRQ = 4;
	private final static int CID_RSSI = 5;
	private final static int LAC_RSRP = 6;
	private final static int LAC_RSRQ = 7;
	private final static int LAC_RSSI = 8;

	public Alert()
	{
		// TODO Auto-generated constructor stub
	}

	public final static boolean add_new(Info add_data, int select)
	{
		int i;
		switch (select)
		{
		case 1:

			if (Alert_CID.size() == 0)
			{
				Alert_CID.add(new AlertQueue(30));// 新建队列，加入这条数据
				Alert_CID.get(0).insert(add_data);
			} else
			{
				for (i = 0; i < Alert_CID.size(); i++) // 遍历查询是否存在 id
				{
					if (Alert_CID.get(i).peekfront().getCell_Id() == add_data.getCell_Id())// 判断队列里面CELL-ID是否存在
					{
						while (judge_time_hour( Alert_CID.get(i).peekrear().getextime(), Alert_CID.get(i).peekfront().getextime() ))// 如果队尾减队首的时间小于一个小时,插入数据,否则删除队头数据
						{
							Alert_CID.get(i).removefront();// 删除队头元素
						}

						Alert_CID.get(i).insert(add_data);// 插入数据
															// ,该句一定执行，因为只有一个数据的时候
															// while循环一定不满足条件
						if (Alert_CID.get(i).isFull())// 如果已满 则报警 return true
						{
							return true;
						}
						break;
					}

				}
				if (i == Alert_CID.size())// 如果满足该条件，说明 CELL-ID是新的
				{
					Alert_CID.add(new AlertQueue(30));// 新建队列
					Alert_CID.get(i).insert(add_data);// 在新建的队列中插入该元素
				}

			}

			break;
		case 2:

			if (Alert_LAC.size() == 0)
			{
				Alert_LAC.add(new AlertQueue(30));// 新建队列，加入这条数据
				Alert_LAC.get(0).insert(add_data);
			} else
			{
				for (i = 0; i < Alert_LAC.size(); i++) // 遍历查询是否存在 id
				{
					if (Alert_LAC.get(i).peekfront().getLAC() == add_data.getLAC())// 判断队列里面CELL-ID是否存在
					{
						while (judge_time_hour( Alert_LAC.get(i).peekrear().getextime(), Alert_LAC.get(i).peekfront().getextime() ))// 如果队尾减队首的时间小于一个小时,插入数据,否则删除队头数据
						{
							Alert_LAC.get(i).removefront();// 删除队头元素
						}

						Alert_LAC.get(i).insert(add_data);// 插入数据
															// ,该句一定执行，因为只有一个数据的时候
															// while循环一定不满足条件
						if (Alert_LAC.get(i).isFull())// 如果已满 则报警 return true
						{
							return true;
						}
						break;
					}

				}
				if (i == Alert_LAC.size())// 如果满足该条件，说明 CELL-ID是新的
				{
					Alert_LAC.add(new AlertQueue(30));// 新建队列
					Alert_LAC.get(i).insert(add_data);// 在新建的队列中插入该元素
				}

			}

			break;
		case 3:
			if (Integer.parseInt(add_data.getRSRP()) < -140 || Integer.parseInt(add_data.getRSRP()) > -44)// RSRP
																											// 正常范围-140~-44
			{
				if (Alert_CID_RSRP.size() == 0)
				{
					Alert_CID_RSRP.add(new AlertQueue(30));// 新建队列，加入这条数据
					Alert_CID_RSRP.get(0).insert(add_data);
				} else
				{
					for (i = 0; i < Alert_CID_RSRP.size(); i++) // 遍历查询是否存在 id
					{
						if (Alert_CID_RSRP.get(i).peekfront().getCell_Id() == add_data.getCell_Id())// 判断队列里面CELL-ID是否存在
						{
							while (judge_time_hour( Alert_CID_RSRP.get(i).peekrear().getextime(), Alert_CID_RSRP.get(i).peekfront().getextime() ))// 如果队尾减队首的时间小于一个小时,插入数据,否则删除队头数据
							{
								Alert_CID_RSRP.get(i).removefront();// 删除队头元素
							}

							Alert_CID_RSRP.get(i).insert(add_data);// 插入数据
																	// ,该句一定执行，因为只有一个数据的时候
																	// while循环一定不满足条件
							if (Alert_CID_RSRP.get(i).isFull())// 如果已满 则报警
																// return true
							{
								return true;
							}
							break;
						}

					}
					if (i == Alert_CID_RSRP.size())// 如果满足该条件，说明 CELL-ID是新的
					{
						Alert_CID_RSRP.add(new AlertQueue(30));// 新建队列
						Alert_CID_RSRP.get(i).insert(add_data);// 在新建的队列中插入该元素
					}

				}
			}
			break;
		case 4:
			if (Integer.parseInt(add_data.getRSRQ()) < -20 || Integer.parseInt(add_data.getRSRQ()) > -3)// RSRQ
																										// 正常范围-20~-3
			{
				if (Alert_CID_RSRQ.size() == 0)
				{
					Alert_CID_RSRQ.add(new AlertQueue(30));// 新建队列，加入这条数据
					Alert_CID_RSRQ.get(0).insert(add_data);
				} else
				{
					for (i = 0; i < Alert_CID_RSRQ.size(); i++) // 遍历查询是否存在 id
					{
						if (Alert_CID_RSRQ.get(i).peekfront().getCell_Id() == add_data.getCell_Id())// 判断队列里面CELL-ID是否存在
						{
							while (judge_time_hour( Alert_CID_RSRQ.get(i).peekrear().getextime(), Alert_CID_RSRQ.get(i).peekfront().getextime() ))// 如果队尾减队首的时间小于一个小时,插入数据,否则删除队头数据
							{
								Alert_CID_RSRQ.get(i).removefront();// 删除队头元素
							}

							Alert_CID_RSRQ.get(i).insert(add_data);// 插入数据
																	// ,该句一定执行，因为只有一个数据的时候
																	// while循环一定不满足条件
							if (Alert_CID_RSRQ.get(i).isFull())// 如果已满 则报警
																// return true
							{
								return true;
							}
							break;
						}

					}
					if (i == Alert_CID_RSRQ.size())// 如果满足该条件，说明 CELL-ID是新的
					{
						Alert_CID_RSRQ.add(new AlertQueue(30));// 新建队列
						Alert_CID_RSRQ.get(i).insert(add_data);// 在新建的队列中插入该元素
					}

				}
			}
			break;
		case 5:
			if (Integer.parseInt(add_data.getRSSI()) < -20 || Integer.parseInt(add_data.getRSSI()) > -3)// RSRQ
																										// 正常范围-90~-25
			{
				if (Alert_CID_RSSI.size() == 0)
				{
					Alert_CID_RSSI.add(new AlertQueue(30));// 新建队列，加入这条数据
					Alert_CID_RSSI.get(0).insert(add_data);
				} else
				{
					for (i = 0; i < Alert_CID_RSSI.size(); i++) // 遍历查询是否存在 id
					{
						if (Alert_CID_RSSI.get(i).peekfront().getCell_Id() == add_data.getCell_Id())// 判断队列里面CELL-ID是否存在
						{
							while (judge_time_hour( Alert_CID_RSSI.get(i).peekrear().getextime(), Alert_CID_RSSI.get(i).peekfront().getextime() ))// 如果队尾减队首的时间小于一个小时,插入数据,否则删除队头数据
							{
								Alert_CID_RSSI.get(i).removefront();// 删除队头元素
							}

							Alert_CID_RSSI.get(i).insert(add_data);// 插入数据
																	// ,该句一定执行，因为只有一个数据的时候
																	// while循环一定不满足条件
							if (Alert_CID_RSSI.get(i).isFull())// 如果已满 则报警
																// return true
							{
								return true;
							}
							break;
						}

					}
					if (i == Alert_CID_RSSI.size())// 如果满足该条件，说明 CELL-ID是新的
					{
						Alert_CID_RSSI.add(new AlertQueue(30));// 新建队列
						Alert_CID_RSSI.get(i).insert(add_data);// 在新建的队列中插入该元素
					}

				}
			}
			break;
		case 6:
			if (Integer.parseInt(add_data.getRSRP()) < -140 || Integer.parseInt(add_data.getRSRP()) > -44)// RSRP
			// 正常范围-140~-44
			{
				if (Alert_LAC_RSRP.size() == 0)
				{
					Alert_LAC_RSRP.add(new AlertQueue(30));// 新建队列，加入这条数据
					Alert_LAC_RSRP.get(0).insert(add_data);
				} else
				{
					for (i = 0; i < Alert_LAC_RSRP.size(); i++) // 遍历查询是否存在 id
					{
						if (Alert_LAC_RSRP.get(i).peekfront().getLAC() == add_data.getLAC())// 判断队列里面LAC是否存在
						{
							while (judge_time_hour( Alert_LAC_RSRP.get(i).peekrear().getextime(), Alert_LAC_RSRP.get(i).peekfront().getextime() ))// 如果队尾减队首的时间小于一个小时,插入数据,否则删除队头数据
							{
								Alert_LAC_RSRP.get(i).removefront();// 删除队头元素
							}

							Alert_LAC_RSRP.get(i).insert(add_data);// 插入数据
							// ,该句一定执行，因为只有一个数据的时候
							// while循环一定不满足条件
							if (Alert_LAC_RSRP.get(i).isFull())// 如果已满 则报警
							// return true
							{
								return true;
							}
							break;
						}

					}
					if (i == Alert_LAC_RSRP.size())// 如果满足该条件，说明 CELL-ID是新的
					{
						Alert_LAC_RSRP.add(new AlertQueue(30));// 新建队列
						Alert_LAC_RSRP.get(i).insert(add_data);// 在新建的队列中插入该元素
					}

				}
			}
			break;
		case 7:
			if (Integer.parseInt(add_data.getRSRQ()) < -20 || Integer.parseInt(add_data.getRSRQ()) > -3)// RSRQ
			// 正常范围-20~-3
			{
				if (Alert_LAC_RSRQ.size() == 0)
				{
					Alert_LAC_RSRQ.add(new AlertQueue(30));// 新建队列，加入这条数据
					Alert_LAC_RSRQ.get(0).insert(add_data);
				} else
				{
					for (i = 0; i < Alert_LAC_RSRQ.size(); i++) // 遍历查询是否存在 id
					{
						if (Alert_LAC_RSRQ.get(i).peekfront().getLAC() == add_data.getLAC())// 判断队列里面CELL-ID是否存在
						{
							while (judge_time_hour( Alert_LAC_RSRQ.get(i).peekrear().getextime(), Alert_LAC_RSRQ.get(i).peekfront().getextime() ))// 如果队尾减队首的时间小于一个小时,插入数据,否则删除队头数据
							{
								Alert_LAC_RSRQ.get(i).removefront();// 删除队头元素
							}

							Alert_LAC_RSRQ.get(i).insert(add_data);// 插入数据
							// ,该句一定执行，因为只有一个数据的时候
							// while循环一定不满足条件
							if (Alert_LAC_RSRQ.get(i).isFull())// 如果已满 则报警
							// return true
							{
								return true;
							}
							break;
						}

					}
					if (i == Alert_LAC_RSRQ.size())// 如果满足该条件，说明 CELL-ID是新的
					{
						Alert_LAC_RSRQ.add(new AlertQueue(30));// 新建队列
						Alert_LAC_RSRQ.get(i).insert(add_data);// 在新建的队列中插入该元素
					}

				}
			}
			break;
		case 8:
			if (Integer.parseInt(add_data.getRSSI()) < -20 || Integer.parseInt(add_data.getRSSI()) > -3)// RSRQ
			// 正常范围-90~-25
			{
				if (Alert_LAC_RSSI.size() == 0)
				{
					Alert_LAC_RSSI.add(new AlertQueue(30));// 新建队列，加入这条数据
					Alert_LAC_RSSI.get(0).insert(add_data);
				} else
				{
					for (i = 0; i < Alert_LAC_RSSI.size(); i++) // 遍历查询是否存在 id
					{
						if (Alert_LAC_RSSI.get(i).peekfront().getLAC() == add_data.getLAC())// 判断队列里面CELL-ID是否存在
						{
							while (judge_time_hour( Alert_LAC_RSSI.get(i).peekrear().getextime(), Alert_LAC_RSSI.get(i).peekfront().getextime() ))// 如果队尾减队首的时间小于一个小时,插入数据,否则删除队头数据
							{
								Alert_LAC_RSSI.get(i).removefront();// 删除队头元素
							}

							Alert_LAC_RSSI.get(i).insert(add_data);// 插入数据
							// ,该句一定执行，因为只有一个数据的时候
							// while循环一定不满足条件
							if (Alert_LAC_RSSI.get(i).isFull())// 如果已满 则报警
							// return true
							{
								return true;
							}
							break;
						}

					}
					if (i == Alert_LAC_RSSI.size())// 如果满足该条件，说明 CELL-ID是新的
					{
						Alert_LAC_RSSI.add(new AlertQueue(30));// 新建队列
						Alert_LAC_RSSI.get(i).insert(add_data);// 在新建的队列中插入该元素
					}

				}
			}
		default:
			break;
		}
		return false;

	}

	private  final static boolean judge_time_hour(String time1, String time2)
	{

		try
		{
			SimpleDateFormat df = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
			java.util.Date t1 = df.parse(time1);
			java.util.Date t2 = df.parse(time2);
			long l = t2.getTime() - t1.getTime();
			long hour = l / (60 * 60 * 1000);// 小时差,大于一小时 则返回true
			if (hour > 1)
				return true;
		} catch (Exception e)
		{
			// TODO: handle exception
			e.printStackTrace();
		}
		return false;

	}
}
